name: Frontend Build

on:
  push:

jobs:
  build:
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2.0.1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Bundle
        run: bun run build

      - name: Save bundle
        uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: dist

  test:
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2.0.1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Test
        run: bun run test:unit --reporter=github-actions

  e2e:
    runs-on: "ubuntu-latest"

    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy

    steps:
      - uses: actions/checkout@v4

      - run: apt-get update && apt-get install unzip

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2.0.1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - run: bun run build

      - name: Test
        run: bun run test:e2e --reporter=github --trace=on
        env:
          HOME: /root

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  chromatic:
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2.0.1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Chromatic
        run: bunx chromatic --auto-accept-changes main --exit-once-uploaded --exit-zero-on-changes
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

  check:
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2.0.1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format
        run: bun run lint --max-warnings=0

  format:
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2.0.1

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format
        run: bun run format --check

  containerize:
    runs-on: "ubuntu-latest"
    needs: [build, test, e2e, check]

    permissions:
      contents: read
      packages: write

    outputs:
      tag: ${{ steps.containerize.outputs.tag }}

    env:
      IMAGE_NAME: "ghcr.io/bytes-zone/todo"
      REGISTRY: "ghcr.io"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: frontend
          path: dist

      - id: containerize
        run: |
          CONTENT_HASH="$(find dist -type f -print0 | sort -z | xargs -0 sha256sum)"
          META_HASH="$(sha256sum Caddyfile Dockerfile)"

          TAG="$(printf '%s\n%s' "$CONTENT_HASH" "$META_HASH" | sha256sum | cut -f 1 -d ' ')"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

          docker build . --tag "${{ env.IMAGE_NAME }}:${TAG}"

      - name: Log into the container registry
        uses: docker/login-action@v3
        if: ${{ github.ref == 'refs/heads/main' }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push
        if: ${{ github.ref == 'refs/heads/main' }}
        run: docker push "${{ env.IMAGE_NAME }}:${{ steps.containerize.outputs.tag }}"

  deploy:
    runs-on: ubuntu-latest
    needs: containerize

    if: ${{ github.ref == 'refs/heads/main' }}

    env:
      IMAGE_NAME: "ghcr.io/bytes-zone/todo"
      REGISTRY: "ghcr.io"

    steps:
      - uses: actions/checkout@v4
        with:
          repository: bytes-zone/infrastructure.v3
          ref: main
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      - name: update manifest
        run: |
          ./update-job-image-gha.sh todo "${{ env.IMAGE_NAME }}:${{ needs.containerize.outputs.tag }}"
